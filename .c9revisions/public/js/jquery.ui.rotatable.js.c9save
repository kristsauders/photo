{"ts":1367352289353,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1367352251169,"patch":[[{"diffs":[[1,"/*!\n * jQuery Element Rotation Plugin\n *\n * Requires jQueryUI \n *\n * Copyright (c) 2010 Pavel Markovnin\n * Dual licensed under the MIT and GPL licenses.\n *\n * Extended by Trevor Wistaff\n *\n * http://vremenno.net\n */\n\n(function ($) {\n  'use strict';\n\n  $.fn.rotatable = function (options) {\n\n    // Default Values\n    var defaults = {\n      rotatorClass: 'ui-rotatable-handle',\n      mtx: [1, 0, 0, 1],\n      autoHide: true\n    }, opts = $.extend(defaults, options),\n      _this = this,\n      _rotator, center_coords, dims;\n\n    // Initialization \n    this.initialize = function () {\n      this.createHandler();\n\n      dims = {\n        'w': _this.width(),\n        'h': _this.height()\n      };\n\n      this.updateRotationMatrix(opts.mtx);\n    };\n\n    // Create Rotation Handler\n    this.createHandler = function () {\n      _rotator = $('<div class=\"' + opts.rotatorClass + '\"></div>');\n      _this.append(_rotator);\n      _this.rotating = false;\n\n      if(opts.autoHide) {\n        $(_this).addClass('ui-rotatable-autohide')\n          .mouseenter(function() {\n            $(this).removeClass('ui-rotatable-autohide');\n          })\n          .mouseleave(function() {\n            if(!_this.rotating) {\n              $(this).addClass('ui-rotatable-autohide');\n            }\n          });\n      }\n\n      this.bindRotation();\n    };\n\n    // Bind Rotation to Handler\n    this.bindRotation = function () {\n\n      // IE Fix\n      if ($.browser.msie) {\n        _rotator.mousedown(function (e) {\n          e.stopPropagation();\n        });\n\n        _rotator.mouseup(function (e) {\n          e.stopPropagation();\n        });\n      }\n\n      _rotator.draggable({\n        handle: _rotator,\n        helper: 'clone',\n        revert: false,\n        start: function (e) {\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n\n          // Element Width & Height()\n          dims = {\n            'w': _this.width(),\n            'h': _this.height()\n          };\n\n          // Center Coords\n          center_coords = {\n            'x': _this.offset().left + _this.width() * 0.5,\n            'y': _this.offset().top + _this.height() * 0.5\n          };\n        },\n        drag: function (e) {\n          var mouse_coords, angle;\n\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n\n          _this.rotating = true;\n\n          // Mouse Coords\n          mouse_coords = {\n            'x': e.pageX,\n            'y': e.pageY\n          };\n\n          angle = _this.radToDeg(_this.getAngle(mouse_coords, center_coords)) - 90;\n          if ($.browser.msie) { angle = -angle; }\n\n          return _this.rotate(angle);\n        },\n        stop: function () {\n          _this.rotating = false;\n        }\n      });\n    };\n\n    // Get Angle\n    this.getAngle = function (ms, ctr) {\n      var x = ms.x - ctr.x,\n        y = -ms.y + ctr.y,\n        hyp = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)),\n        angle = Math.acos(x / hyp);\n\n      if (y < 0) {\n        angle = 2 * Math.PI - angle;\n      }\n\n      return angle;\n    };\n\n    // Convert from Degrees to Radians\n    this.degToRad = function (d) {\n      return (d * (Math.PI / 180));\n    };\n\n    // Convert from Radians to Degrees\n    this.radToDeg = function (r) {\n      return (r * (180 / Math.PI));\n    };\n\n    // Rotate Element to the Given Degree\n    this.rotate = function (degree) {\n      var cos = Math.cos(_this.degToRad(-degree)),\n        sin = Math.sin(_this.degToRad(-degree)),\n        mtx = [cos, sin, (-sin), cos];\n\n      this.updateRotationMatrix(mtx);\n    };\n\n    // Get CSS Transform Matrix (transform: matrix)\n    this.getRotationMatrix = function () {\n      var _matrix = _this.css('transform') || 'matrix(1, 0, 0, 1, 0, 0)',\n        _m = _matrix.split(','),\n        m = [],\n        i;\n\n      for (i = 0; i < 4; i++) {\n        m[i] = parseFloat(_m[i].replace('matrix(', ''));\n      }\n      return m;\n    };\n\n    // Update CSS Transform Matrix (transform: matrix)\n    this.updateRotationMatrix = function (m) {\n      var matrix = 'matrix(' + m[0] + ', ' + m[1] + ', ' + m[2] + ', ' + m[3] + ', 0, 0)',\n        ie_matrix = \"progid:DXImageTransform.Microsoft.Matrix(M11='\" + m[0] + \"', M12='\" + m[1] + \"', M21='\" + m[2] + \"', M22='\" + m[3] + \"', sizingMethod='auto expand')\";\n\n      _this.css({\n        '-moz-transform': matrix,\n        '-o-transform': matrix,\n        '-webkit-transform': matrix,\n        '-ms-transform': matrix,\n        'transform': matrix,\n        'filter': ie_matrix,\n        '-ms-filter': '\"' + ie_matrix + '\"'\n      });\n\n      // IE Fix\n      if ($.browser.msie) {\n        var coef = dims.w / dims.h,\n          _height = _this.parent().parent().height(),\n          _width = coef * _height,\n          _top = (dims.h - _height) / 2,\n          _left = (dims.w - _width) / 2;\n\n        _this.parent().parent().css({\n          'width': _width\n        });\n\n        _this.parent().css({\n          'left': _left,\n          'top': _top\n        });\n      }\n    };\n\n    return this.initialize();\n  };\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":4983}]],"length":4983,"saved":false}
